@startuml C4_Container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml


Person(user_person, "User", "Reddit user")

System_Boundary(c1, "Reddit system") {
    Container(spa, "Single-Page Application", "NextJS", "Frontend.",)

    Container(gateway, "Gateway", "Nginx", "Routes requests")

    Boundary(auth_microservice, "Authentication microservice") {
        Container(auth, "Auth", "FastAPI", "Ensures requests are authenticated")
    }

    Boundary(rabbitmq, "RabbitMQ Message broker") {
        Component(success_registration_queue, "Successful registration queue")
    }

    Boundary(user_microservice, "User microservice") {
        Container(user, "User", "FastAPI", "Handles all user requests")
        ContainerDb(user_db, "User database", "PostgreSQL", "Holds user microservice information.")
    }

    Boundary(comment_microservice, "Comment microservice") {
        Container(comment, "Comment", "FastAPI", "Handles all comment requests")
        ContainerDb(comment_db, "Comment database", "PostgreSQL", "Holds comment microservice information.")
    }

    Boundary(post_microservice, "Post microservice") {
        Container(post, "Post", "FastAPI", "Handles all post requests")
        ContainerDb(post_db, "Post database", "PostgreSQL", "Holds post microservice information.")
    }

    Boundary(vote_microservice, "Vote microservice") {
        Container(vote, "Vote", "FastAPI", "Handles all vote requests")
        ContainerDb(vote_db, "Vote database", "PostgreSQL", "Holds vote microservice information.")
    }

    Boundary(email_microservice, "Email microservice") {
        Container(email, "Email", "Python3", "Builds and sends emails.")
    }
}

System_Ext(azure_ad, "Microsoft Azure AD", "OAuth2.0 provider.")
System_Ext(email_communication_service, " Microsoft Azure Email Communication Service", "Sends emails on behalf of not-reddit")
SystemDb_Ext(blob_storage, "Microsoft Azure Blob Storage", "Storage for images and videos.")

Rel(spa, azure_ad, "Gets access token from", "OAuth2.0")

Rel(user_person, spa, "Uses", "HTTPS")

Rel(spa, gateway, "Uses", "HTTPS")

Rel(gateway, user_microservice, "Routes to", "HTTPS")
Rel(gateway, comment_microservice, "Routes to", "HTTPS")
Rel(gateway, post_microservice, "Routes to", "HTTPS")
Rel(gateway, vote_microservice, "Routes to", "HTTPS")
Rel_R(gateway, auth_microservice, "Routes to", "HTTPS")

Rel_R(auth_microservice, azure_ad, "Authenticates with", "OAuth2.0")

Rel(user, user_db, "Reads/Writes", "SQLAlchemy")
Rel(user_microservice, success_registration_queue, "Sends", "AMQP")

Rel(comment, comment_db, "Reads/Writes", "SQLAlchemy")

Rel(post, post_db, "Reads/Writes", "SQLAlchemy")
Rel(post_microservice, blob_storage, "Reads/Writes", "HTTPS")
Rel(post_microservice, success_registration_queue, "Consumes", "AMQP")

Rel(vote, vote_db, "Reads/Writes", "SQLAlchemy")

Rel_U(email_microservice, success_registration_queue, "Consumes", "AMQP")
Rel(email_microservice, email_communication_service, "Sends", "SMTP")

Lay_R(vote_microservice, comment_microservice)

@enduml
